image_config: &image_config

  # make sure to set your Docker Hub username & password in CircleCI,
  # either as project-specific environment variables
  # or as resources in your organization's org-global Context

  IMAGE_NAME: # name your image (no spaces please!)

  IMAGE_TAG: # give your image a tag (no spaces please!)

  # NOTE: if you're modifying this config.yml file manually
  # rather than using the included setup script,
  # make sure you also add the values of your IMAGE_NAME & IMAGE_TAG variables
  # to the `test_image` job (line 58)

  LINUX_VERSION: # DEBIAN_JESSIE, DEBIAN_STRETCH, UBUNTU_TRUSTY, or UBUNTU_XENIAL

  RUBY_VERSION_NUM: # pick a version from https://cache.ruby-lang.org/pub/ruby

  NODE_VERSION_NUM: # pick a version from https://nodejs.org/dist

  PYTHON_VERSION_NUM: # pick a version from https://python.org/ftp/python

  JAVA: # Java options: true, false

  MYSQL_CLIENT: # MySQL options: true, false

  POSTGRES_CLIENT: # Postgres options: true, false

  BROWSERS: # browser tools (Xvfb, PhantomJS, Firefox, Chrome, Chromedriver): true, false

  # NOTE: if you are modifying this config.yml file manually,
  # make sure to also comment out the accompanying `run` steps (lines 66-82)
  # in the `test_image` job for any languages/dependencies
  # that you are not installing in your Docker image

version: 2
jobs:
  build:
    machine: true
    environment:
      <<: *image_config

    steps:
      - checkout

##      - run: bash scripts/generate.sh > Dockerfile

##      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

##      - run: docker build -t $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG .

##      - run: docker push $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG && sleep 10

##      - store_artifacts:
##          path: Dockerfile

##  test_image:
##    docker:
##      - image: $DOCKER_USERNAME/(name of image):(image tag)

##    steps:

##      - checkout

##      - run:
##          name: run tests
##          command: |
##            bats scripts/tests.bats | perl scripts/tap-to-junit.sh > results.xml
##            mkdir -p test_results/bats && mv results.xml test_results/bats
##          environment:
##            <<: *image_config

##      - store_test_results:
##          path: test_results/bats

##      - store_artifacts:
##          path: test_results/bats

##workflows:
##  version: 2
##  dockerfile_wizard:
##    jobs:
##      - build:
##          context: org-global

##      - test_image:
##          context: org-global
##          requires:
##            - build
